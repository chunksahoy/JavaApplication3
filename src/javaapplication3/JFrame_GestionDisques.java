/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package javaapplication3;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author 200777439
 */
public class JFrame_GestionDisques extends javax.swing.JFrame {

    /**
     * Creates new form JFrame_Gestion
     * @param conn
     */
    
    public JFrame_GestionDisques(ConnectionOracle conn) {
        connBD = conn;
        initComponents();
    }

    private JFrame_GestionDisques() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        List_Disques = new javax.swing.JList();
        TB_Recherche_Artiste = new javax.swing.JTextField();
        BTN_Ajouter_Artiste = new javax.swing.JButton();
        BTN_Modifier_Artiste = new javax.swing.JButton();
        BTN_Supprimer_Artiste = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        List_Genre = new javax.swing.JList();
        BTN_Supprimer_Genre = new javax.swing.JButton();
        BTN_Ajouter_Genre = new javax.swing.JButton();
        TB_Recherche_Disque = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        List_Artistes = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TB_Prenom = new javax.swing.JTextField();
        TB_Nom = new javax.swing.JTextField();
        TB_Nationalite = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        BTN_Begin_Artistes = new javax.swing.JButton();
        BTN_Previous_Artistes = new javax.swing.JButton();
        BTN_Next_Artistes = new javax.swing.JButton();
        BTN_Last_Artistes = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        BTN_Previous_Disque = new javax.swing.JButton();
        BTN_First_Disques = new javax.swing.JButton();
        BTN_Last_Disques = new javax.swing.JButton();
        BTN_Next_Disques = new javax.swing.JButton();
        TB_Titre = new javax.swing.JTextField();
        TB_Genre = new javax.swing.JTextField();
        TB_Annee = new javax.swing.JTextField();
        TB_Prix = new javax.swing.JTextField();
        TB_Chansons = new javax.swing.JTextField();
        TB_Langue = new javax.swing.JTextField();
        BTN_Lister_Disques = new javax.swing.JButton();
        BTN_Lister_Genres = new javax.swing.JButton();
        BTN_Lister_Artistes = new javax.swing.JButton();
        BTN_Ajouter_Disque = new javax.swing.JButton();
        BTN_Modifier_Disque = new javax.swing.JButton();
        BTN_Supprimer = new javax.swing.JButton();
        TB_Artistes = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(List_Disques);

        TB_Recherche_Artiste.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TB_Recherche_ArtisteKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TB_Recherche_ArtisteKeyReleased(evt);
            }
        });

        BTN_Ajouter_Artiste.setText("Ajouter");
        BTN_Ajouter_Artiste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Ajouter_ArtisteActionPerformed(evt);
            }
        });

        BTN_Modifier_Artiste.setText("Modifier");
        BTN_Modifier_Artiste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Modifier_ArtisteActionPerformed(evt);
            }
        });

        BTN_Supprimer_Artiste.setText("Supprimer");
        BTN_Supprimer_Artiste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Supprimer_ArtisteActionPerformed(evt);
            }
        });

        List_Genre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                List_GenreMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(List_Genre);

        BTN_Supprimer_Genre.setText("Supprimer");
        BTN_Supprimer_Genre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Supprimer_GenreActionPerformed(evt);
            }
        });

        BTN_Ajouter_Genre.setText("Ajouter");
        BTN_Ajouter_Genre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Ajouter_GenreActionPerformed(evt);
            }
        });

        TB_Recherche_Disque.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TB_Recherche_DisqueKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TB_Recherche_DisqueKeyReleased(evt);
            }
        });

        List_Artistes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                List_ArtistesMouseClicked(evt);
            }
        });
        List_Artistes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                List_ArtistesValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(List_Artistes);

        jLabel1.setText("Artistes:");

        jLabel2.setText("Disques: ");

        jLabel3.setText("Prénom:");

        jLabel4.setText("Nom:");

        jLabel5.setText("Nation: ");

        BTN_Begin_Artistes.setText("<<");
        BTN_Begin_Artistes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Begin_ArtistesActionPerformed(evt);
            }
        });

        BTN_Previous_Artistes.setText("<");
        BTN_Previous_Artistes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Previous_ArtistesActionPerformed(evt);
            }
        });

        BTN_Next_Artistes.setText(">");
        BTN_Next_Artistes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Next_ArtistesActionPerformed(evt);
            }
        });

        BTN_Last_Artistes.setText(">>");
        BTN_Last_Artistes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Last_ArtistesActionPerformed(evt);
            }
        });

        jLabel6.setText("Titre:");

        jLabel7.setText("Prix:");

        jLabel8.setText("Genre:");

        jLabel9.setText("Chansons:");

        jLabel10.setText("Année:");

        jLabel11.setText("Langue:");

        BTN_Previous_Disque.setText("<");
        BTN_Previous_Disque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Previous_DisqueActionPerformed(evt);
            }
        });

        BTN_First_Disques.setText("<<");
        BTN_First_Disques.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_First_DisquesActionPerformed(evt);
            }
        });

        BTN_Last_Disques.setText(">>");
        BTN_Last_Disques.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Last_DisquesActionPerformed(evt);
            }
        });

        BTN_Next_Disques.setText(">");
        BTN_Next_Disques.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Next_DisquesActionPerformed(evt);
            }
        });

        BTN_Lister_Disques.setText("Lister");
        BTN_Lister_Disques.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Lister_DisquesActionPerformed(evt);
            }
        });

        BTN_Lister_Genres.setText("Lister");
        BTN_Lister_Genres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Lister_GenresActionPerformed(evt);
            }
        });

        BTN_Lister_Artistes.setText("Lister");
        BTN_Lister_Artistes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Lister_ArtistesActionPerformed(evt);
            }
        });

        BTN_Ajouter_Disque.setText("Ajouter");
        BTN_Ajouter_Disque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Ajouter_DisqueActionPerformed(evt);
            }
        });

        BTN_Modifier_Disque.setText("Modifier");
        BTN_Modifier_Disque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Modifier_DisqueActionPerformed(evt);
            }
        });

        BTN_Supprimer.setText("Supprimer");
        BTN_Supprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SupprimerActionPerformed(evt);
            }
        });

        jLabel12.setText("Artistes:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BTN_Ajouter_Genre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTN_Supprimer_Genre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTN_Lister_Genres)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(BTN_Ajouter_Artiste)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BTN_Supprimer_Artiste)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BTN_Lister_Artistes))
                            .addComponent(TB_Recherche_Artiste, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel3)
                                                        .addGap(11, 11, 11))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(TB_Nom, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(TB_Prenom, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(TB_Nationalite, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel1))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(BTN_Begin_Artistes)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(10, 10, 10)
                                                        .addComponent(BTN_Modifier_Artiste))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(BTN_Previous_Artistes)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(BTN_Next_Artistes, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(BTN_Last_Artistes)))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel7)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addGroup(layout.createSequentialGroup()
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(TB_Prix, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(jLabel9)
                                                                        .addGap(10, 10, 10))
                                                                    .addGroup(layout.createSequentialGroup()
                                                                        .addGap(8, 8, 8)
                                                                        .addComponent(TB_Titre, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGap(6, 6, 6)
                                                                        .addComponent(jLabel8)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel6)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(jLabel12)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(TB_Artistes, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(62, 62, 62)))
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                            .addComponent(TB_Chansons, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                                            .addComponent(TB_Genre))
                                                        .addGap(6, 6, 6)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel10)
                                                            .addComponent(jLabel11))
                                                        .addGap(18, 18, 18)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                            .addComponent(TB_Langue)
                                                            .addComponent(TB_Annee, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addGap(0, 0, Short.MAX_VALUE)
                                                        .addComponent(BTN_Ajouter_Disque)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(BTN_Supprimer)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(BTN_Lister_Disques)))
                                                .addContainerGap())
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(134, 134, 134)
                                                .addComponent(BTN_First_Disques)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(10, 10, 10)
                                                        .addComponent(BTN_Modifier_Disque))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(BTN_Previous_Disque)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(BTN_Next_Disques, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(BTN_Last_Disques)))
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 37, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(TB_Recherche_Disque, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(236, 236, 236)
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TB_Recherche_Artiste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TB_Recherche_Disque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BTN_Ajouter_Artiste)
                        .addComponent(BTN_Supprimer_Artiste)
                        .addComponent(BTN_Lister_Artistes))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BTN_Ajouter_Disque)
                            .addComponent(BTN_Supprimer)
                            .addComponent(BTN_Lister_Disques, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel6)
                                                    .addComponent(jLabel10)
                                                    .addComponent(TB_Titre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(TB_Genre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(TB_Annee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addGap(17, 17, 17)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel11)
                                            .addComponent(TB_Prix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TB_Chansons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TB_Langue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TB_Prenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(TB_Nom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TB_Nationalite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12)
                                    .addComponent(TB_Artistes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(54, 54, 54)))
                        .addGap(18, 21, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BTN_Begin_Artistes)
                            .addComponent(BTN_Previous_Artistes)
                            .addComponent(BTN_Next_Artistes)
                            .addComponent(BTN_Last_Artistes)
                            .addComponent(BTN_First_Disques)
                            .addComponent(BTN_Previous_Disque)
                            .addComponent(BTN_Next_Disques)
                            .addComponent(BTN_Last_Disques))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTN_Ajouter_Genre)
                    .addComponent(BTN_Supprimer_Genre)
                    .addComponent(BTN_Lister_Genres)
                    .addComponent(BTN_Modifier_Artiste)
                    .addComponent(BTN_Modifier_Disque))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTN_Lister_ArtistesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Lister_ArtistesActionPerformed
        String sql = "select Prenom, Nom from artistes";
        
        try
        {
            Statement stm  = connBD.getConnection().createStatement();
            ResultSet rst = stm.executeQuery(sql);
            DefaultListModel listModel = new DefaultListModel();
            
            while(rst.next())
            {
                String prenom = rst.getString(1);
                String nom = rst.getString(2);
                if(prenom != null)
                    listModel.addElement( prenom + " " + nom );
                else
                    listModel.addElement(nom);
            }
            List_Artistes.setModel(listModel);            
        }
        catch(SQLException ex)
        {
            System.err.println(ex);
        }
        
    }//GEN-LAST:event_BTN_Lister_ArtistesActionPerformed

    private void BTN_Lister_GenresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Lister_GenresActionPerformed
        String sql = "select nomgenre from genres";        
        try
        {
            Statement stm  = connBD.getConnection().createStatement();
            ResultSet rst = stm.executeQuery(sql);
            DefaultListModel listModel = new DefaultListModel();
            
            while(rst.next())
            {
                String genre = rst.getString(1);           
                listModel.addElement(genre);               
            }
            List_Genre.setModel(listModel);            
        }
        catch(SQLException ex)
        {
            System.err.println(ex);
        }
    }//GEN-LAST:event_BTN_Lister_GenresActionPerformed

    private void BTN_Lister_DisquesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Lister_DisquesActionPerformed
        String sql = "select numdisque, titre, g.nomgenre, anneesortie, langue, nbchansons, artiste from disques d inner join "
                + "genres g on d.codegenre = g.codegenre";        
        try
        {
            Statement stm  = connBD.getConnection().createStatement();
            ResultSet rst = stm.executeQuery(sql);
            DefaultListModel listModel = new DefaultListModel();
            
            while(rst.next())
            {
                String num = ((Integer)rst.getInt(1)).toString();
                String titre = rst.getString(2);
                String genre = rst.getString(3);
                String anneesortie = ((Integer)rst.getInt(4)).toString();
                String langue = rst.getString(5);
                String nbChansons = ((Integer)rst.getInt(6)).toString();
                String artiste = rst.getString(7);
                
                listModel.addElement(num + " TItre: " + titre + " | Genre: " + genre + " |Année: " + anneesortie + " | Langue: " + langue + " | Nb Chansons: " + nbChansons + " | Artiste: " + artiste);
               
            }
            List_Disques.setModel(listModel);
            
        }
        catch(SQLException ex)
        {
            System.err.println(ex);
        }    }//GEN-LAST:event_BTN_Lister_DisquesActionPerformed

    private void BTN_Ajouter_ArtisteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Ajouter_ArtisteActionPerformed
        JFrame_AjoutArtiste fenetre = new JFrame_AjoutArtiste(connBD);
        fenetre.setVisible(true);
        
    }//GEN-LAST:event_BTN_Ajouter_ArtisteActionPerformed

    private void BTN_Supprimer_ArtisteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Supprimer_ArtisteActionPerformed
        Supprimer_Artiste();
    }//GEN-LAST:event_BTN_Supprimer_ArtisteActionPerformed

    private void BTN_Modifier_ArtisteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Modifier_ArtisteActionPerformed
        try
        {
            Modifier_Artiste();
        }
        catch(SQLException ex)
        {
            System.err.println(ex);
        }
    }//GEN-LAST:event_BTN_Modifier_ArtisteActionPerformed

    private void BTN_Ajouter_GenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Ajouter_GenreActionPerformed
        JFrame_AjoutGenre fenetre = new JFrame_AjoutGenre(connBD);
        fenetre.setVisible(true);
    }//GEN-LAST:event_BTN_Ajouter_GenreActionPerformed

    private void BTN_Supprimer_GenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Supprimer_GenreActionPerformed
        Supprimer_Genre();
    }//GEN-LAST:event_BTN_Supprimer_GenreActionPerformed

    private void BTN_Ajouter_DisqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Ajouter_DisqueActionPerformed
        JFrame_AjoutDisque fenetre = new JFrame_AjoutDisque(connBD);
        fenetre.setVisible(true);
    }//GEN-LAST:event_BTN_Ajouter_DisqueActionPerformed

    private void BTN_Modifier_DisqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Modifier_DisqueActionPerformed
       try
       {
         Modifier_Disque();           
       }
       catch(SQLException ex)
       {
           System.err.println(ex);
       }

    }//GEN-LAST:event_BTN_Modifier_DisqueActionPerformed

    private void BTN_SupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SupprimerActionPerformed
        Supprimer_Disque();
    }//GEN-LAST:event_BTN_SupprimerActionPerformed

    private void List_ArtistesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_List_ArtistesValueChanged
                
    }//GEN-LAST:event_List_ArtistesValueChanged

    private void List_ArtistesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_List_ArtistesMouseClicked
        Afficher_Artiste();
    }//GEN-LAST:event_List_ArtistesMouseClicked

    private void BTN_Previous_ArtistesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Previous_ArtistesActionPerformed
       try 
       {
          if(rstArtistes.previous())
          {
              Update_TextArtistes(rstArtistes);
          }
          else 
          {
              JOptionPane.showMessageDialog(this, "Précedent impossible");
          }       
      }   
     catch(SQLException se)
     {
        JOptionPane.showMessageDialog(this, "précedent impossible");
     }
    }//GEN-LAST:event_BTN_Previous_ArtistesActionPerformed

    private void BTN_Begin_ArtistesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Begin_ArtistesActionPerformed
        try 
        {
            Statement stm = connBD.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rstArtistes = stm.executeQuery(sqlArtistes);
            if (rstArtistes.first())
            {
                Update_TextArtistes(rstArtistes);
            }
        }
        catch(SQLException se){
            System.out.println(se);
        }
    }//GEN-LAST:event_BTN_Begin_ArtistesActionPerformed

    private void BTN_Next_ArtistesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Next_ArtistesActionPerformed
       try 
       {
          if(rstArtistes.next())
          {
              Update_TextArtistes(rstArtistes);
          }
          else 
          {
              JOptionPane.showMessageDialog(this, "Suivant impossible");
          }       
      }   
     catch(SQLException se)
     {
        JOptionPane.showMessageDialog(this, "Suivant impossible");
     }
    }//GEN-LAST:event_BTN_Next_ArtistesActionPerformed

    private void BTN_Last_ArtistesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Last_ArtistesActionPerformed
        try 
        {
            Statement stm = connBD.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rstArtistes = stm.executeQuery(sqlArtistes);
            if (rstArtistes.last())
            {
                Update_TextArtistes(rstArtistes);
            }
        }
        catch(SQLException se){
            System.out.println(se);
        }
    }//GEN-LAST:event_BTN_Last_ArtistesActionPerformed

    private void BTN_First_DisquesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_First_DisquesActionPerformed
       try 
        {
            Statement stm = connBD.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rstDisques = stm.executeQuery(sqlDisques);
            if (rstDisques.first())
            {
                Update_TextDisques(rstDisques);
            }
        }
        catch(SQLException se){
            System.out.println(se);
        }
    }//GEN-LAST:event_BTN_First_DisquesActionPerformed

    private void BTN_Previous_DisqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Previous_DisqueActionPerformed
       try 
       {
          if(rstDisques.previous())
          {
              Update_TextDisques(rstArtistes);
          }
          else 
          {
              JOptionPane.showMessageDialog(this, "Précedent impossible");
          }       
      }   
     catch(SQLException se)
     {
        JOptionPane.showMessageDialog(this, "précedent impossible");
     }
    }//GEN-LAST:event_BTN_Previous_DisqueActionPerformed

    private void BTN_Next_DisquesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Next_DisquesActionPerformed
         try 
       {
          if(rstDisques.next())
          {
              Update_TextDisques(rstDisques);
          }
          else 
          {
              JOptionPane.showMessageDialog(this, "Suivant impossible");
          }       
      }   
     catch(SQLException se)
     {
        JOptionPane.showMessageDialog(this, "Suivant impossible");
     }
    }//GEN-LAST:event_BTN_Next_DisquesActionPerformed

    private void BTN_Last_DisquesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Last_DisquesActionPerformed
        try 
        {
            Statement stm = connBD.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rstDisques = stm.executeQuery(sqlArtistes);
            if (rstDisques.last())
            {
                Update_TextDisques(rstDisques);
            }
        }
        catch(SQLException se){
            System.out.println(se);
        }
    }//GEN-LAST:event_BTN_Last_DisquesActionPerformed

    private void List_GenreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_List_GenreMouseClicked
        Afficher_Genre();
    }//GEN-LAST:event_List_GenreMouseClicked

    private void TB_Recherche_ArtisteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TB_Recherche_ArtisteKeyReleased
   
    }//GEN-LAST:event_TB_Recherche_ArtisteKeyReleased

    private void TB_Recherche_DisqueKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TB_Recherche_DisqueKeyReleased
       
    }//GEN-LAST:event_TB_Recherche_DisqueKeyReleased

    private void TB_Recherche_DisqueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TB_Recherche_DisqueKeyPressed
        try {
           Rechercher_Disque(evt);
       }
       catch(SQLException ex){
           System.err.println(ex);
       }
    }//GEN-LAST:event_TB_Recherche_DisqueKeyPressed

    private void TB_Recherche_ArtisteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TB_Recherche_ArtisteKeyPressed
       try {
           Rechercher_Artiste(evt);
       }
       catch(SQLException ex){
           System.err.println(ex);
       }
    }//GEN-LAST:event_TB_Recherche_ArtisteKeyPressed

    private void Update_TextArtistes(ResultSet rst) throws SQLException {
        TB_Nom.setText (rst.getString("nom"));
        TB_Prenom.setText(rst.getString("prenom"));
        TB_Nationalite.setText(rst.getString("nationalite"));
    }
    
    private void Update_TextDisques(ResultSet rst) throws SQLException {
        TB_Titre.setText(rst.getString("titre"));
        TB_Genre.setText(rst.getString("nomgenre"));
        TB_Annee.setText(((Integer)rst.getInt("AnneeSortie")).toString());
        TB_Prix.setText(((Integer)rst.getInt("prix")).toString());
        TB_Chansons.setText(((Integer)rst.getInt("nbchansons")).toString());
        TB_Langue.setText(rst.getString("langue"));
        TB_Artistes.setText(rst.getString("artiste"));
    }
    
    private void Afficher_Artiste() {
        String nom = List_Artistes.getSelectedValue().toString().split("\\s+")[0].toString();
        String prenom = List_Artistes.getSelectedValue().toString().split("\\s+").length > 1 ? List_Artistes.getSelectedValue().toString().split("\\s+")[1].toString():null;
        String select = prenom != null? nom + " " + prenom: nom;
        String sql = "select numdisque, titre, g.nomgenre, anneesortie, langue, nbchansons, artiste from disques d inner join "
                + "genres g on d.codegenre = g.codegenre where d.artiste = '" + select + "'";
        try
        {
            Statement stm  = connBD.getConnection().createStatement();
            ResultSet rst = stm.executeQuery(sql);
            DefaultListModel listModel = new DefaultListModel();
            
            while(rst.next())
            {
                String num = ((Integer)rst.getInt(1)).toString();
                String titre = rst.getString(2);
                String genre = rst.getString(3);
                String anneesortie = ((Integer)rst.getInt(4)).toString();
                String langue = rst.getString(5);
                String nbChansons = ((Integer)rst.getInt(6)).toString();
                String artiste = rst.getString(7);
                
                listModel.addElement(num + " TItre: " + titre + " | Genre: " + genre + " |Année: " + anneesortie + " | Langue: " + langue + " | Nb Chansons: " + nbChansons + " | Artiste: " + artiste);
               
            }
            List_Disques.setModel(listModel);
            
        }
        catch(SQLException ex)
        {
            System.err.println(ex);
        } 
        
    }
    
    private void Afficher_Genre() {
        String select = "(select codegenre from genres where nomgenre = '" + List_Genre.getSelectedValue().toString() + "')";
        String sql = "select numdisque, titre, g.nomgenre, anneesortie, langue, nbchansons, artiste from disques d inner join "
                    + "genres g on d.codegenre = g.codegenre where d.codegenre = " + select;        
        System.out.println(sql);
         try
        {
            Statement stm  = connBD.getConnection().createStatement();
            ResultSet rst = stm.executeQuery(sql);
            DefaultListModel listModel = new DefaultListModel();
            
            while(rst.next())
            {
                String num = ((Integer)rst.getInt(1)).toString();
                String titre = rst.getString(2);
                String genre = rst.getString(3);
                String anneesortie = ((Integer)rst.getInt(4)).toString();
                String langue = rst.getString(5);
                String nbChansons = ((Integer)rst.getInt(6)).toString();
                String artiste = rst.getString(7);
                
                listModel.addElement(num + " TItre: " + titre + " | Genre: " + genre + " |Année: " + anneesortie + " | Langue: " + langue + " | Nb Chansons: " + nbChansons + " | Artiste: " + artiste);
               
            }
            List_Disques.setModel(listModel);
            
        }
        catch(SQLException ex)
        {
            System.err.println(ex);
        } 
    }
    
    private void Modifier_Artiste()throws SQLException {
        String nom = TB_Nom.getText();
        String prenom = TB_Prenom.getText();
        String nation = TB_Nationalite.getText();
        String select = "(select numartiste from artistes where nom = '" + nom + "')";
        String sql = "update artistes set nom = '" + nom + "', prenom = '" + prenom + "', nationalite = '" + nation + "'"+
                " where numartiste = " + select;
        
        System.out.println(sql);
        Statement stm = connBD.getConnection().createStatement();
        stm.execute(sql);
    }
    
    private void Modifier_Disque() throws SQLException {
        String titre = TB_Titre.getText();
        String artiste = TB_Artistes.getText();
        String prix = TB_Prix.getText();
        String annee = TB_Annee.getText();
        String chansons = TB_Chansons.getText();
        String genre = TB_Genre.getText();
        String langue = TB_Langue.getText();
        
        String code = "(select codegenre from genres where nomgenre = '" + genre + "')";
        String num = "(select numdisque from disques where titre ='" + titre+ "')";
        String sql = "update disques set titre = '" + titre + "', artiste ='" + artiste + "', prix=" + prix + ",anneesortie=" + annee + "," +
                "nbChansons =" + chansons + ", langue='" + langue + "',codegenre =" +code + " where numdisque = " + num;

        Statement stm = connBD.getConnection().createStatement();
        stm.execute(sql);
        stm.execute("commit");
    }
    
    private void Supprimer_Artiste() {
        String select = "(select numartiste from artistes where nom = '" + List_Artistes.getSelectedValue().toString().split("\\s+")[1].toString()+ "')";
        String sql = "delete from artistes where numartiste = " + select;
        String commit = "commit";
        try
        {
            Statement stm = connBD.getConnection().createStatement();
            stm.execute(sql);
            stm.execute(commit);
        }
        catch(SQLException ex) {
            System.err.println(ex);
        }
    }
    
    private void Supprimer_Genre() {
        String select = "(select codegenre from genres where nomgenre = '" + List_Genre.getSelectedValue().toString() + "')";
        String sql = "delete from genres where codegenre = " + select;
        String commit = "commit";
        try
        {
            Statement stm = connBD.getConnection().createStatement();
            stm.execute(sql);
            stm.execute(commit);
        }
        catch(SQLException ex)
        {
            System.err.println(ex);
        }
    }
    
    private void Supprimer_Disque() {
        String select = List_Disques.getSelectedValue().toString().split("\\s+")[0].toString();
        String sql = "delete from disques where numdisque = " + select;
        String commit = "commit";
        try
        {
            System.out.println(select);
            Statement stm = connBD.getConnection().createStatement();
            stm.execute(sql);
            stm.execute(commit);
        }
        catch(SQLException ex) {
            System.err.println(ex);
        }
    }
    
    private void Rechercher_Artiste(java.awt.event.KeyEvent evt) throws SQLException {
        String recherche = TB_Recherche_Artiste.getText() + evt.getKeyChar();
        String sql = "select nom, prenom from artistes where nom like '" + recherche +  "%'";
        System.out.println(sql);
        try
        {
            Statement stm  = connBD.getConnection().createStatement();
            ResultSet rst = stm.executeQuery(sql);
            DefaultListModel listModel = new DefaultListModel();
            
            while(rst.next())
            {
                String prenom = rst.getString(1);
                String nom = rst.getString(2);
                if(prenom != null)
                    listModel.addElement( nom + " " + prenom );
                else
                    listModel.addElement(prenom);
            }
            List_Artistes.setModel(listModel);            
        }
        catch(SQLException ex)
        {
            System.err.println(ex);
        }
    }
    private void Rechercher_Disque(java.awt.event.KeyEvent evt) throws SQLException {
        String recherche = TB_Recherche_Disque.getText() + evt.getKeyChar();
        String sql = "select numdisque, titre, g.nomgenre, anneesortie, langue, nbchansons, artiste, prix from disques d inner join "
                + "genres g on d.codegenre = g.codegenre where titre like '" + recherche +  "%'";

            Statement stm  = connBD.getConnection().createStatement();
            ResultSet rst = stm.executeQuery(sql);
            DefaultListModel listModel = new DefaultListModel();
            
            while(rst.next())
            {
                String num = ((Integer)rst.getInt(1)).toString();
                System.out.println(num);
                String titre = rst.getString(2);
                String genre = rst.getString(3);
                String anneesortie = ((Integer)rst.getInt(4)).toString();
                String langue = rst.getString(5);
                String nbChansons = ((Integer)rst.getInt(6)).toString();
                String artiste = rst.getString(7);
               
                listModel.addElement(num + " TItre: " + titre + " | Genre: " + genre + " |Année: " + anneesortie + " | Langue: " + langue + " | Nb Chansons: " + nbChansons + " | Artiste: " + artiste);
               
            
            List_Disques.setModel(listModel);
            }        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame_GestionDisques.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame_GestionDisques.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame_GestionDisques.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame_GestionDisques.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JFrame_GestionDisques().setVisible(true);
            }
        });
    }

    private ResultSet rstDisques;
    private ResultSet rstArtistes;
    private String sqlDisques = "select titre, g.nomgenre, anneesortie, langue, nbchansons, artiste, prix from disques d inner join "
                + "genres g on d.codegenre = g.codegenre";
    private String sqlArtistes = "select Prenom, Nom, Nationalite from artistes";
    
    private final ConnectionOracle connBD;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_Ajouter_Artiste;
    private javax.swing.JButton BTN_Ajouter_Disque;
    private javax.swing.JButton BTN_Ajouter_Genre;
    private javax.swing.JButton BTN_Begin_Artistes;
    private javax.swing.JButton BTN_First_Disques;
    private javax.swing.JButton BTN_Last_Artistes;
    private javax.swing.JButton BTN_Last_Disques;
    private javax.swing.JButton BTN_Lister_Artistes;
    private javax.swing.JButton BTN_Lister_Disques;
    private javax.swing.JButton BTN_Lister_Genres;
    private javax.swing.JButton BTN_Modifier_Artiste;
    private javax.swing.JButton BTN_Modifier_Disque;
    private javax.swing.JButton BTN_Next_Artistes;
    private javax.swing.JButton BTN_Next_Disques;
    private javax.swing.JButton BTN_Previous_Artistes;
    private javax.swing.JButton BTN_Previous_Disque;
    private javax.swing.JButton BTN_Supprimer;
    private javax.swing.JButton BTN_Supprimer_Artiste;
    private javax.swing.JButton BTN_Supprimer_Genre;
    private javax.swing.JList List_Artistes;
    private javax.swing.JList List_Disques;
    private javax.swing.JList List_Genre;
    private javax.swing.JTextField TB_Annee;
    private javax.swing.JTextField TB_Artistes;
    private javax.swing.JTextField TB_Chansons;
    private javax.swing.JTextField TB_Genre;
    private javax.swing.JTextField TB_Langue;
    private javax.swing.JTextField TB_Nationalite;
    private javax.swing.JTextField TB_Nom;
    private javax.swing.JTextField TB_Prenom;
    private javax.swing.JTextField TB_Prix;
    private javax.swing.JTextField TB_Recherche_Artiste;
    private javax.swing.JTextField TB_Recherche_Disque;
    private javax.swing.JTextField TB_Titre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
